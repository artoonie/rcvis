[unix_http_server]
file=/dev/shm/supervisor.sock
chmod=0700

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisord]
logfile=/var/log/supervisord/supervisord.log ; supervisord log file
logfile_maxbytes=50MB       ; maximum size of logfile before rotation
logfile_backups=10          ; number of backed up logfiles
loglevel=info               ; info, debug, warn, trace
pidfile=/var/run/supervisord.pid ; pidfile location
nodaemon=true               ; run supervisord as a daemon
minfds=1024                 ; number of startup file descriptors
minprocs=200                ; number of process descriptors
user=root                   ; default user
childlogdir=/var/log/supervisord/            ; where child log files will live

[supervisorctl]
serverurl=unix:///dev/shm/supervisor.sock

[program:dbus]
command=/usr/bin/dbus-daemon --system --nofork --nopidfile
autostart=true
autorestart=false
startsecs=5
startretries=3
exitcodes=0
stdout_logfile=/dev/stdout
stderr_logfile=/dev/stderr
stdout_logfile_maxbytes=0
stderr_logfile_maxbytes=0

[program:celeryd-xvfb]
command=Xvfb :99 -ac -screen 0 1280x720x16 -nolisten tcp

[program:celeryd-worker]
; Set full path to celery program if using virtualenv
; Note: Don't wrap this in something like xvfb-run or the supervisorctl will fail to kill it,
;       and every deployment will increase the # of celery tasks until you thrash unrecoverably,
;       and you will exceed your beer budget trying to keep sane fixing it.
command=/usr/local/bin/celery worker -A rcvis --loglevel=INFO

directory=/code/
user=root
numprocs=1
autostart=true
autorestart=true
startsecs=10
worker_max_memory_per_child=512000 # 512MB

; redirect child process output to supervisord output
stdout_logfile=/dev/stdout
stderr_logfile=/dev/stderr
stdout_logfile_maxbytes=0
stderr_logfile_maxbytes=0

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 100

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998

; TODO - environment vars?
