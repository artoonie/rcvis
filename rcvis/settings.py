"""
Django settings for rcvis project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

import django_on_heroku
from dotenv import load_dotenv  # for decouple-based environment variable handling


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# =======================
# Security Settings
# =======================

# SECURITY WARNING: keep the secret key used in production secret!

# Load environment variables from .env
load_dotenv()

# SECRET_KEY Configuration
# Now, you can access the variables like this
RCVIS_SECRET_KEY = os.getenv('RCVIS_SECRET_KEY')

if not RCVIS_SECRET_KEY:
    raise ValueError("The RCVIS_SECRET_KEY environment variable is not set!")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['RCVIS_DEBUG'] == "True"

# =======================
# Rate Limiting
# =======================
# Toggle rate limiting for AJAX requests.
# This setting is useful to disable during tests.

# Only useful to disable in tests
RATE_LIMIT_AJAX = True

# I'm not proud of this. Add hosts - one per environment variable

# Dynamically set ALLOWED_HOSTS based on environment variables
ALLOWED_HOSTS = [os.environ['RCVIS_HOST']]
# Add an alias host if defined
if 'RCVIS_HOST_ALIAS' in os.environ:
    ALLOWED_HOSTS.append(os.environ['RCVIS_HOST_ALIAS'])
# Add Heroku app hostname if running on Heroku
if 'HEROKU_APP_NAME' in os.environ:
    ALLOWED_HOSTS.append(os.environ['HEROKU_APP_NAME'] + '.heroku.com')
# Add localhost and 127.0.0.1 for development
if os.environ.get(
        'DJANGO_ENV') == 'development':  # Optional: check for a development environment flag
    ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # for sitemap
    'django.contrib.sitemaps',
    'django.contrib.sites',

    'visualizer',
    'movie',
    'scraper',
    'electionpage',

    'admin_cursor_paginator',
    'accounts.apps.AccountsAppConfig',
    'storages',
    'compressor',
    'extra_views',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_tracking',
    'sortedm2m',
    'django_cleanup.apps.CleanupConfig',
    'django_social_share',
    'django_node_assets',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    # This should be after SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',

    # Order of the next 3 is important
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',

    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rcvis.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'rcvis.wsgi.application'
OFFLINE_MODE = os.environ['OFFLINE_MODE'] == "True"

# for django.sites (and thus, sitemap)
SITE_ID = 1

# django_on_heroku will override this in production
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# django-registration (# days to click the link in email)
ACCOUNT_ACTIVATION_DAYS = 1
LOGIN_REDIRECT_URL = '/upload.html'
if OFFLINE_MODE:
    # Just print emails to the console in offline mode (and in tests)
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.sendgrid.net'
    EMAIL_HOST_USER = os.environ.get('SENDGRID_USERNAME')
    EMAIL_HOST_PASSWORD = os.environ.get('SENDGRID_PASSWORD')
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    DEFAULT_FROM_EMAIL = 'team@rcvis.com'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static/'),
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
    'django_node_assets.finders.NodeModulesFinder',
)
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    }
}

NODE_PACKAGE_JSON = './package.json'
NODE_MODULES_ROOT = './node_modules'
NODE_PACKAGE_MANAGER_EXECUTABLE = os.environ.get('NODE_PACKAGE_MANAGER_EXECUTABLE', '/usr/bin/npm')

COMPRESS_ROOT = "static/"
COMPRESS_ENABLED = True
COMPRESS_FILTERS = {
    'css': [
        'compressor.filters.css_default.CssAbsoluteFilter',
        'compressor.filters.cssmin.CSSCompressorFilter'
    ],
    'js': [
        'compressor.filters.jsmin.JSMinFilter'
    ]
}
COMPRESS_OFFLINE = True

# Logging: include INFO logs, and combine with django_on_heroku
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ('%(asctime)s [%(process)d] [%(levelname)s] ' +
                       'lineno=%(lineno)s ' +
                       'funcname=%(funcName)s %(message)s'),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'roothandler': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        }
    },
    'loggers': {
        'testlogger': {
            'handlers': ['console'],
            'level': 'INFO',
        }
    },
    'root': {
        'handlers': ['roothandler'],
        'level': 'INFO',
    }
}

# Uploaded media
if not OFFLINE_MODE:
    STORAGES["default"] = {"BACKEND": "storages.backends.s3boto3.S3Boto3Storage"}
    AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']
    AWS_S3_REGION_NAME = os.environ['AWS_S3_REGION_NAME']
    AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
    AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
    AWS_S3_FILE_OVERWRITE = False
else:
    STORAGES["default"] = {"BACKEND": "django.core.files.storage.FileSystemStorage"}
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIAFILES_DIRS = [
        os.path.join(BASE_DIR, "media"),
    ]

# For scaling heroku workers up if needed
HEROKU_API_KEY = os.environ.get('HEROKU_API_KEY')
HEROKU_APP_NAME = os.environ.get('HEROKU_APP_NAME')
HEROKU_WORKER_DYNO_TYPE = os.environ.get('HEROKU_WORKER_DYNO_TYPE')

# Movie creation
AWS_POLLY_STORAGE_BUCKET_NAME = os.environ.get('AWS_POLLY_STORAGE_BUCKET_NAME')

# Cloudflare API
CLOUDFLARE_ZONE_ID = os.environ.get('CLOUDFLARE_ZONE_ID')
CLOUDFLARE_AUTH_TOKEN = os.environ.get('CLOUDFLARE_AUTH_TOKEN')

AWS_DEFAULT_ACL = None

if os.environ.get('DISABLE_CACHE') != 'True':
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': '/tmp/django_rcvis_cache/',
        }
    }
else:
    assert DEBUG
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '10/hour',
        'user': '1000/hour'
    }

}

MOVIE_FONT_NAME = os.environ.get("MOVIE_FONT_NAME", "Roboto")

MAILCHIMP_API_KEY = os.environ.get("MAILCHIMP_API_KEY")
MAILCHIMP_LIST_ID = os.environ.get("MAILCHIMP_LIST_ID")
MAILCHIMP_DC = os.environ.get("MAILCHIMP_DC")

if not OFFLINE_MODE:
    # Otherwise tests will use a live database and not clear after each test
    # Also ensure logging is output on remote
    django_on_heroku.settings(locals(), staticfiles=False, secret_key=False, logging=False)

# Load additional settings from local_settings.py
try:
    from .local_settings import *
except ImportError:
    raise ImportError("local_settings.py file is missing!")
    raise ImportError("local_settings.py file is missing!")
SECURE_HSTS_SECONDS = 3600

SECURE_HSTS_INCLUDE_SUBDOMAINS = True

SECURE_CONTENT_TYPE_NOSNIFF = True

SECURE_SSL_REDIRECT = os.getenv('SECURE_SSL_REDIRECT_ENABLED') != 'False'

SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE_ENABLED') != 'False'

CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE_ENABLED') != 'False'

SECURE_HSTS_PRELOAD = True